plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'org.jlleitschuh.gradle.ktlint' version '11.3.1'
    id 'org.jetbrains.kotlin.android'
}

def appVersionName = "5.2.5"
def appVersionCode = 52005
def packageName = "org.linphone"
def firebaseAvailable = new File(projectDir.absolutePath + '/google-services.json').exists()
def crashlyticsAvailable = new File(projectDir.absolutePath + '/google-services.json').exists() && new File(LinphoneSdkBuildDir + '/libs/').exists() && new File(LinphoneSdkBuildDir + '/libs-debug/').exists()
def extractNativeLibs = false

if (firebaseAvailable) {
    apply plugin: 'com.google.gms.google-services'
}

def gitBranch = new ByteArrayOutputStream()
task getGitVersion() {
    def gitVersion = appVersionName
    def gitVersionStream = new ByteArrayOutputStream()
    def gitCommitsCount = new ByteArrayOutputStream()
    def gitCommitHash = new ByteArrayOutputStream()

    try {
        exec {
            executable "git"
            args "describe", "--abbrev=0"
            standardOutput = gitVersionStream
        }
        exec {
            executable "git"
            args "rev-list", gitVersionStream.toString().trim() + "..HEAD", "--count"
            standardOutput = gitCommitsCount
        }
        exec {
            executable "git"
            args "rev-parse", "--short", "HEAD"
            standardOutput = gitCommitHash
        }
        exec {
            executable "git"
            args "name-rev", "--name-only", "HEAD"
            standardOutput = gitBranch
        }

        if (gitCommitsCount.toString().toInteger() == 0) {
            gitVersion = gitVersionStream.toString().trim()
        } else {
            gitVersion = gitVersionStream.toString().trim() + "." + gitCommitsCount.toString().trim() + "+" + gitCommitHash.toString().trim()
        }
        println("Git version: " + gitVersion + " (" + appVersionCode + ")")
    } catch (ignored) {
        println("Git not found, using " + gitVersion + " (" + appVersionCode + ")")
    }
    project.version = gitVersion
}

configurations {
    customImplementation.extendsFrom implementation
}

task linphoneSdkSource() {
    doLast {
        configurations.customImplementation.getIncoming().each {
            it.getResolutionResult().allComponents.each {
                if (it.id.getDisplayName().contains("linphone-sdk-android")) {
                    println 'Linphone SDK used is ' + it.moduleVersion.version + ' from ' + it.properties["repositoryName"]
                }
            }
        }
    }
}

project.tasks['preBuild'].dependsOn 'getGitVersion'
project.tasks['preBuild'].dependsOn 'linphoneSdkSource'

android {
    compileOptions {
        sourceCompatibility = 17
        targetCompatibility = 17
    }

    compileSdkVersion 34
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33
        versionCode appVersionCode
        versionName "${project.version}"
        applicationId packageName
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "linphone-android-${variant.buildType.name}-${project.version}.apk"
        }

        var enableFirebaseService = "false"
        if (firebaseAvailable) {
            enableFirebaseService = "true"
        }

        if (variant.buildType.name == "release" || variant.buildType.name == "releaseWithCrashlytics") {
            variant.getMergedFlavor().manifestPlaceholders = [
                    linphone_address_mime_type: "vnd.android.cursor.item/vnd." + packageName + ".provider.sip_address",
                    linphone_file_provider: packageName + ".fileprovider",
                    appLabel: "@string/app_name",
                    firebaseServiceEnabled: enableFirebaseService
            ]
        } else {
            variant.getMergedFlavor().manifestPlaceholders = [
                    linphone_address_mime_type: "vnd.android.cursor.item/vnd." + packageName + ".provider.sip_address",
                    linphone_file_provider: packageName + ".debug.fileprovider",
                    appLabel: "@string/app_name_debug",
                    firebaseServiceEnabled: enableFirebaseService
            ]
            extractNativeLibs = true
        }
    }

    // Remove keystore.properties loading and add direct signing configurations for debug
    signingConfigs {
        debug {
            keyAlias "androiddebugkey"
            keyPassword "android"
            storeFile file("$rootDir/debug.keystore")
            storePassword "android"
        }
        release {
            // Use the keystore properties here if you still plan to sign release builds
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            resValue "string", "linphone_app_branch", gitBranch.toString().trim()
            resValue "string", "sync_account_type", packageName + ".sync"
            resValue "string", "file_provider", packageName + ".fileprovider"
            resValue "string", "linphone_address_mime_type", "vnd.android.cursor.item/vnd." + packageName + ".provider.sip_address"

            if (!firebaseAvailable) {
                resValue "string", "gcm_defaultSenderId", "none"
            }

            resValue "bool", "crashlytics_enabled", "false"
        }

        releaseWithCrashlytics {
            initWith release

            resValue "bool", "crashlytics_enabled", crashlyticsAvailable.toString()

            if (crashlyticsAvailable) {
                apply plugin: 'com.google.firebase.crashlytics'

                firebaseCrashlytics {
                    nativeSymbolUploadEnabled true
                    unstrippedNativeLibsDir file(LinphoneSdkBuildDir + '/libs-debug/').toString()
                }
            }
        }

        debug {
            applicationIdSuffix ".debug"
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.debug // Assign debug signing config

            resValue "string", "linphone_app_branch", gitBranch.toString().trim()
            resValue "string", "sync_account_type", packageName + ".sync"
            resValue "string", "file_provider", packageName + ".debug.fileprovider"
            resValue "string", "linphone_address_mime_type", "vnd.android.cursor.item/vnd." + packageName + ".provider.sip_address"
            resValue "bool", "crashlytics_enabled", crashlyticsAvailable.toString()

            if (!firebaseAvailable) {
                resValue "string", "gcm_defaultSenderId", "none"
            }

            if (crashlyticsAvailable) {
                apply plugin: 'com.google.firebase.crashlytics'

                firebaseCrashlytics {
                    nativeSymbolUploadEnabled false
                }
            }
        }
    }

    buildFeatures {
        dataBinding = true
    }

    namespace 'org.linphone'
    packagingOptions {
        jniLibs {
            useLegacyPackaging extractNativeLibs
        }
    }
}

dependencies {
    // Keep your dependencies as they are
}

tasks.withType(JavaCompile) {
    options.forkOptions.executable = "${System.getenv('JAVA11_HOME') ?: System.getenv('JAVA_HOME')}/bin/java"
}

tasks.withType(Test) {
    executable = "${System.getenv('JAVA11_HOME') ?: System.getenv('JAVA_HOME')}/bin/java"
}

task linphoneCompile(type: Exec) {
    environment "JAVA_HOME", System.getenv('JAVA11_HOME') ?: System.getenv('JAVA_HOME')
    // Any specific Linphone compilation tasks here
}
